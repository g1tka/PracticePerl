use strict;
use warnings;

my @score = (64, 90, 75);
# 配列。＠。@配列名。中身は「要素」。要素を取り出すには・・・
# print $score[0];
# ひとつ取り出すのはスカラー変数。$で指定。０～

# print $score[0] + $score[1] + $score[2], "\n";

my $sum = 0;
foreach my $item (@score) {
    $sum = $sum + $item;
}
print $sum, "\n";

# はじめに＝０と定義しているが、これは初期化している。
# foreach　繰り返しの構文を作るためのもの。
# 配列の要素を1個1個取り出して　→　$itemにセット。
# $sum（これまでの合計）＋ $item を左辺の $sum へ代入する。
# $sum += $item;でもよい。これは、$sum に $item を足し込んでいる。と。
# 変数省略がよく行われるとのこと。$item の部分を書かない。
# $_ が自動的に代わりとなる。何か要素を用いたいときはこれを記述することでアクセスできる。
foreach (@score) {
    $sum += $_;
}

# 配列に要素を追加したい場合
$score[3] = 100;
# print @score, "\n";
# デバッグプリント。649075100と表示された。いちおう、追加されたことを確認できた。

# 文字列も代入できる。qw()便利表記法を使うと、スペースを区切りとして、単語をリストの要素にする。
# my @week = qw(Sun Mon Tue Wed Thu Fri Sat);
my @week = ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
foreach my $day (@week) {
    print "$day ";
}
print "\n";
# デバッグプリントのための記述が一手間。連続して表示されてしまうのを防いだ。
# ""（二重引用符）中で展開すると！要素がスペースで区切られたものになる！！！！

print "@score\n";
print "@week\n";
print "国語は $score[0] 点です。\n";
# 簡単だ・・・

# @を含む文字列の出力（配列じゃない）（test\@mail.comなど）
print "test\@mail.com\n";

# 配列の要素数を調べるには、arrayをscalarに代入する。
my @array = (
    31,
    41,
    59,
    26,
);
my $length = @array;
print $length, "\n";
# 4
# 関数scalarを使ってもいい。強制的にスカラーコンテキストで評価することができる。
print scalar(@array), "\n";
# 以下は配列の大きさによって処理が変わるif文の例。
if (@array) {
    # 配列が空でない場合。@array > 0 と同じ。
} else {    # 配列が空の場合
}

# 配列の最後の要素を得たいとき。
my $last = $array[-1];
#        = $array[$#array];
print $last, "\n";
# 要素が４つの配列に対して、要素の添字は0,1,2,3。
# 最後の要素の添字 $#array == @array - 1; である。（真）

=pod
要素の交換　（$xと$yを交換したい）
$tmp = $x;
$x = $y;
$y = $tmp;
もしくは以下
($x, $y) = ($y, $x);
($x, $y, $z) = ($y, $z, $x);
=cut

=pod
要素の合体　（@user1という配列と@user2という配列をすべて前から順に合わせる）
my @users = (@user1, @user2);
@user1, @user2を書き換えても、合体した後であれば@usersが自動的に書き換わることはない。
print "@users\n";
=cut

# my @score = (64, 90, 75, 100);
# Perlの組み込み関数joinを使うと、配列の要素を連結して1つの文字列にすることができる。
print join(',', @score), "\n";
# 64, 90, 75
# join(区切り文字列(今回は","), 配列やリスト(期待))　という形式。
print '点数は' . join('点と、', (60, 90, 70)) . '点です。', "\n";
# 60, 90, 70　区切り文字は要素の合間に入り、最後の要素の後ろにはつかない。

# Perlの組み込み関数splitを使うと、文字列を分けられる。
my @score1 = split(/,/, '64,90,75');
print "@score1\n";
# split(/パターン/, 文字列)　という形式。第二引数のところ、文字列、なので数も文字列！！！
# 64 90 75　と出力される。　","を消した。
# //で囲うことで（正規表現）区切り文字列のパターンを表現。
my $line = 'Hello, world!';
my @array2 = split(//, $line);
print join(':', @array2), "\n";
# H:e:l:l:o:,: :w:o:r:l:d:! となる！
print join(':', @score), "\n";
# 64:90:75:100 となる！（それぞれが文字列）
=pod

なるほど利用例：アクセスカウンターの一部
$counter ：アクセスカウンタの数値が入っている（とする）
my $counter = 123;
my @counter = split(//, $counter);
foreach my $file (@counter) {
    print "<img src=\"$file.gif\">";
}
出力：<img src="1.gif"><img src="2.gif"><img src="3.gif">
もしくは・・・
my $counter = 123;foreach (split(//, $counter)) {
    print qq|<img src="$_.gif">|;
}
出力：<img src="1.gif"><img src="2.gif"><img src="3.gif">
=cut

# my @data = split(/ /, '  green  red    yellow  ');
# print "@data\n";
# print join(' ', @data),"\n";
# my @data = split(/\s+/, '  green  red    yellow  ');
# \sはスペースやタブなどの空白全般を意味する。メタ文字＋は一個以上の繰り返し。

# push(@array, 'LAST');
# push関数。配列の最後に要素を付け加える。
my @array3 = ('one', 'two', 'three');
push(@array3, 'FOUR');
print "\@array3 = @array3\n";
# 配列が空の場合、一つ追加（最後についか）
# 配列の最後に、要素だけでなく配列も追加できる。
my @list2 = ('FOUR', 'FIVE', 'SIX');
my @array4 = ('one', 'two', 'three');
push(@array4, @list2);
# もしくは　push(@array4, ('FOUR', 'FIVE', 'SIX'))
print "\@array4 = @array4\n";

my $item = pop(@array3);
print "pop後 \@array3 = @array3\n";
print "\$item = $item\n";
# (one two three)　→　FOUR
# popを繰り返すと、配列の後ろから順番に取り出され、長さが１つずつ短くなる。
# 再度、
$item = pop(@array3);
print "( @array3 ) → $item\n";
# ( one two ) → three
$item = pop(@array3);
print "( @array3 ) → $item\n";
# ( one ) → two
$item = pop(@array3);
print "( @array3 ) → $item\n";
# (  ) → one
# さらに実行しようとする。
# $item = pop(@array3);
# print "( @array3 ) → $item\n";
# Use of uninitialized value $item in concatenation (.) or string at array1.pl line 166.
# (  ) →
# 上の二行が出力されたが、これはundefという未定義を表す特殊な値が返される。とのこと。
# 「スタック」というデータ構造とみなし、後入れ先出し、Last In First Out, LIFO。

# shift関数は配列の最初の要素を取り出す。一つ前に、シフトする。
my @array5 = ('one', 'two', 'three');
my $item2 = shift(@array5);
print "$item2 ← ( @array5 ) \n";
# one ← ( two three )
# unshift関数は逆に最初に要素を追加する。
# unshift(@array, $item);
my @array6 = unshift(@array5, $item2);
print "$item2 →( @array5 )\n";
print "\@array6 = 戻り値は要素数：( @array6 )\n";

=pod
まとめ。配列末尾に追加 push 取り出し pop
配列戦闘に追加unshift 取り出し shift

push と pop でスタックという捉え方。後入れ先出し、Last In First Out, LIFO。
shift と unshift でスタックという捉え方。
push で追加していくがshiftで出されていくと　先入れ先出し。
これは「キュー」というデータ構造。First In first Out, FIFO。
push と shift でキューを構成することができる。
先に並んだひとが、先に処理される、順番待ちもキュー。
=cut

# splice(ARRAY, OFFSET, LENGTH, LIST) 
# splice(対象配列の, ここから, これだけの長さを削除し, そこにこのリストを挿入する)
my @array7 = ('a', 'b', 'c', 'd', 'e', 'f');
my @xyz = ('X', 'Y', 'Z');
my @removed = splice(@array7, 1, 4, @xyz);
print "\@array7 = @array7\n";
print "\@removed = @removed\n";
# @array7 = a X Y Z f
# @removed = b c d e
# spliceの戻り値は削除したリスト

my @array8 = ('a', 'b', 'c', 'd', 'e', 'f');
my @removed2 = splice(@array8, 1, 4);
print "\@array8 = @array8\n";
print "\@removed2 = @removed2\n";
# @array8 = a f
# @removed2 = b c d e
# 最後のLASTを省略すると、挿入は行われず、単なる削除になる。

my @array9 = ('a', 'b', 'c', 'd', 'e', 'f');
my @removed3 = splice(@array9, 1);
print "\@array9 = @array9\n";
print "\@removed3 = @removed3\n";
# @array9 = a
# @removed3 = b c d e f
# LASTに加えて、LENGTHも省略すると、長さ指定なし＝以降すべてが削除対象。

my @array10 = ('a', 'b', 'c', 'd', 'e', 'f');
my @removed4 = splice(@array10);
print "\@array10 = @array10\n";
print "\@removed4 = @removed4\n";
# @array10 =
# @removed4 = a b c d e f
# さらにOFFSETも省略すると、開始位置指定なし＝配列の最初の要素から
# 最後まで、挿入するものナシ　→　すべて、削除、となる。

# my @week = ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
my @sorted = sort(@week);
print join(', ', @sorted), "\n";
# Fri, Mon, Sat, Sun, Thu, Tue, Wed
# 関数ソートを使うと、文字コードが小さい順にソートする。
# 逆順にしたい場合は、sort後に関数reverseを使う。
my @reversed = reverse(sort(@week));
print join(', ', @reversed), "\n";
# Wed, Tue, Thu, Sun, Sat, Mon, Fri

print "@score\n";
# my @score = (64, 90, 75, 100);
my @sorted2 = sort(@score);
print join(', ', @sorted2), "\n";
print "なお、\@score = @score のまま。\n";
# 100, 64, 75, 90 ※先頭の数字が小さい順になっている。
# 関数sort は、「文字列の文字コード順」に並べ替える点に注意！！
my @sorted3 = sort { $a <=> $b } @score;
#             sort {BLOCK} LIST
print join(', ', @sorted3), "\n";
# 64, 75, 90, 100 ※理想通り！

# <=>
# $a < $b なら -1
# $a = $b なら 0
# $a < $b なら 1
# という値になる演算子。

# Perlの配列は一次元配列（よ、こ、な、ら、び）
# 二次元配列を作りたければリファレンスという機構を勉強する必要あり。perlrestut。

=pod
$scalar がスカラー、@array が配列全体、$array[$i] が配列の要素（スカラー）。
「配列のスライス」
my @array = ('a', 'b', 'c', 'd', 'e');
print join(':', ($array[0], $array[2], $array[4]));
→ a:c:e
@array[0, 2, 4]　と同じ！
これは配列のスライス。配列の0,2,4番目の要素からなる部分的な配列。

@array[10,11,12,13,14,15,16,17,18,19,20]
これと同じ
@array[10..20]".."
という演算子（範囲演算子）は左辺の値から、右辺の値まで１ずつ増加するリストを作る。

@array[0, 1] = @array[1, 0];
これは配列の最初の2つの要素を交換する例。

@array[0, $#array] = @array[$#array, 0];
配列の最初と最後の要素を交換する例。

@array[0, 1, 2] = @array[1, 2, 0];
配列のスライスを使って配列の内容をローテーションする例。※$array[0]・・と同じ
$array[0]は、配列@arrayの最初の要素を表すスカラー変数。
@array[0]は、配列の最初の要素のみからなる配列のスライス。
配列とリストについて学んだ！
=cut

my $time = '01:23:45';
# my ($hour, $min, $sec) = $time;
my ($hour, $min, $sec) = split(/:/, $time);
print "$hour時$min分$sec秒です。\n";

=pod
# if (0 <= $index and $index <= $#array) {
if (0 <= $index and $index < @array) {
    print $array[$index], "\n";
}

spliceを使ってpush/pop/shift/unshiftを書く！
# splice(ARRAY, OFFSET, LENGTH, LIST) 
# splice(対象配列の, ここから, これだけの長さを削除し, そこにこのリストを挿入する)

1. push(@array, $item);
※ @arrayの最後に$itemをpush
splice(@array, @array, 0, $item);

2. $item = pop(@array)
※ @arrayの後ろからひとつpopして$itemに代入 
×　splice(@array, @array, 1, $item);
$item = splice(@array, $#array(もしくは-1));

3. $item = shift(@array);
※ @arrayの先頭から一つshiftして$itemに代入 
×　splice(@array, 0, 1);
$item = splice(@array, 0, 1);

4. unshift(@array, $item);
※ @arrayの先頭に１つ$itemをunshift
splice(@array, 0, 0, $item);

5. $array[$index] = $item;
※ @arrayの$index番目の要素に$itemという値を代入（置換？）
splice(@array, $index, 1, $item);
=cut

# my @kandigit = qw(〇 一 二 三 四 五 六 七 八 九);
# これで$kandigit[5] = 五、#kandigit[0] = 〇となる。
if ($num == 0) {
    $knum = '〇';
} elsif ($num == 1) {
    $knum = '一';
} elsif ($num == 2) {
    $knum = '二';
} elsif ($num == 3) {
    $knum = '三';
} elsif ($num == 4) {
    $knum = '四';
} elsif ($num == 5) {
    $knum = '五';
} elsif ($num == 6) {
    $knum = '六';
} elsif ($num == 7) {
    $knum = '七';
} elsif ($num == 8) {
    $knum = '八';
} elsif ($num == 9) {
    $knum = '九';
} else {
    $knum = undef;
}

# my @reversed = sort { $b <=> $a } @array;
# my @reversed = reverse sort { $a <=> $b } @array;

# my $data = "$myname,$mymsg,$mytime";
# join(区切り文字列, 配列やリスト)で連結する。
my $data = join(',', $myname, $mymsg, $mytime);
# split(/パターン/, 文字列)で区切る。
my ($myname, $mymsg, $mytime) = split(/,/, $data);
# $myname,$mymsg,$mytime（の中身）が区切り文字となるコンマを含んではならない。
# もしコンマを含んでいた場合、splitした結果は正しくもとに戻らなくなる。
# コンマを&encode、&decode等置換する手配をすることで防げる。らしい。
# ★データを連結したり分割したりする場合には、データ中に含まれる文字の範囲に注意をはらい、
# 　　区切り文字と干渉しないように気を付ける必要がある。

